// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Check if mock data should be used
const useMockData = import.meta.env.VITE_USE_MOCK_DATA === 'true';

// Create a complete mock client for frontend-only mode that implements all needed methods
class MockSupabaseClient {
  // A basic implementation that just returns empty data for all operations
  from() {
    return {
      select: () => this,
      insert: () => this,
      update: () => this,
      delete: () => this,
      eq: () => this,
      neq: () => this,
      gt: () => this,
      lt: () => this,
      gte: () => this,
      lte: () => this,
      like: () => this,
      ilike: () => this,
      is: () => this,
      in: () => this,
      contains: () => this,
      containedBy: () => this,
      rangeLt: () => this,
      rangeGt: () => this,
      rangeGte: () => this,
      rangeLte: () => this,
      rangeAdjacent: () => this,
      overlaps: () => this,
      textSearch: () => this,
      filter: () => this,
      or: () => this,
      and: () => this,
      order: () => this,
      limit: () => this,
      range: () => this,
      maybeSingle: () => this,
      single: async () => ({ data: null, error: null }),
      execute: async () => ({ data: [], error: null }),
      then: (callback) => Promise.resolve(callback({ data: [], error: null })),
    };
  }

  rpc() {
    return {
      data: null,
      error: null
    };
  }

  storage = {
    from: () => ({
      upload: async () => ({ data: { path: '' }, error: null }),
      getPublicUrl: () => ({ data: { publicUrl: '' } }),
      list: async () => ({ data: [], error: null }),
      remove: async () => ({ data: {}, error: null }),
      download: async () => ({ data: new Blob(), error: null }),
    }),
  };

  auth = {
    getUser: async () => ({ data: { user: null }, error: null }),
    getSession: async () => ({ data: { session: null }, error: null }),
    signOut: async () => ({ error: null }),
    signInWithPassword: async () => ({ data: { user: null, session: null }, error: null }),
    signUp: async () => ({ data: { user: null, session: null }, error: null }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } }, error: null }),
    refreshSession: async () => ({ data: { session: null }, error: null }),
  };
}

// Create a mock client or a real one based on environment
let supabaseClient: any;

// Setup the client based on environment
if (useMockData) {
  console.log("Using mock Supabase client");
  supabaseClient = new MockSupabaseClient();
} else {
  try {
    // Get the environment variables
    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
    const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
    
    // Only create the client if both URL and key are provided
    if (supabaseUrl && supabaseAnonKey) {
      supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey);
    } else {
      console.warn("Supabase URL or key missing, using mock client instead");
      supabaseClient = new MockSupabaseClient();
    }
  } catch (error) {
    console.error("Error initializing Supabase client:", error);
    supabaseClient = new MockSupabaseClient();
  }
}

export const supabase = supabaseClient;